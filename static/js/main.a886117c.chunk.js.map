{"version":3,"sources":["LoginForm.js","App.js","Chart.js","Dashboard.js","reportWebVitals.js","index.js"],"names":["LoginForm","history","useHistory","useState","User","setUser","Pass","setPass","localStorage","getItem","push","id","style","color","class","type","placeholder","value","onChange","e","target","onClick","timerInterval","setItem","Swal","fire","title","icon","showClass","popup","html","hideClass","timer","didOpen","setInterval","content","getContent","b","querySelector","textContent","getTimerLeft","willClose","clearInterval","then","result","dismiss","DismissReason","setTimeout","App","className","BarChart","refContainer","useRef","dataSource","setDataSource","useEffect","axios","get","response","gres","data","cats","ys","i","length","moment","created_at","format","comments","m","arrayMax","chart","Highcharts","current","plotOptions","column","animation","duration","responsive","rules","condition","maxWidth","chartOptions","legend","enabled","text","subtitle","xAxis","categories","crosshair","yAxis","min","max","tooltip","headerFormat","pointFormat","footerFormat","shared","useHTML","credits","series","hideLoading","showLoading","catch","err","console","log","res","ActiveSeries","HyperSeries","SuperSeries","user","login","y","name","ref","animationDuration","animationDelay","width","PieChart","pieContainer","PieSource","setPieSource","Pies","number","error","backgroundColor","verticalAlign","floating","fontSize","pie","dataLabels","fontFamily","innerSize","Dashboard","padding","mixin","customClass","confirmButton","cancelButton","buttonsStyling","showCancelButton","confirmButtonText","cancelButtonText","reverseButtons","isConfirmed","removeItem","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","exact","path","document","getElementById"],"mappings":"uPAsJeA,MA/If,WAEI,IAAMC,EAAUC,cAFC,EAIOC,qBAJP,mBAIVC,EAJU,KAIJC,EAJI,OAKOF,qBALP,mBAKVG,EALU,KAKJC,EALI,KAkBjB,OAXqC,MAAjCC,aAAaC,QAAQ,UACrBR,EAAQS,KAAK,cAYb,sBAAKC,GAAG,YAAR,UACI,oBAAIA,GAAG,cAAcC,MAAO,CACxBC,MAAO,QADX,wBAGA,sBAAKC,MAAM,MAAX,UACI,6CACA,uBAAOC,KAAK,OAAOC,YAAY,sBAAsBC,MAAOb,EAAMc,SAhB3D,SAACC,GAChBd,EAAQc,EAAEC,OAAOH,aAiBb,sBAAKH,MAAM,MAAX,UACI,6CACA,uBAAOC,KAAK,WAAWC,YAAY,sBAAsBC,MAAOX,EAAMY,SAhB/D,SAACC,GAChBZ,EAAQY,EAAEC,OAAOH,aAiBb,qBAAKN,GAAG,SAASG,MAAM,MAAvB,SACI,wBAAQO,QACJ,WAGQ,IAAIC,EAFR,GAAa,SAATlB,GAA4B,UAATE,EACnBE,aAAae,QAAQ,QAAS,QAE9BC,IAAKC,KAAK,CACNC,MAAO,WACPC,KAAM,UAENC,UAAW,CACPC,MAAO,yCAEXC,KAAM,sCACNC,UAAW,CACPF,MAAO,wCAGXG,MAAO,IACPC,QAAS,WACLX,EAAgBY,aAAY,WACxB,IAAMC,EAAUX,IAAKY,aACrB,GAAID,EAAS,CACT,IAAME,EAAIF,EAAQG,cAAc,KAC5BD,IACAA,EAAEE,YAAcf,IAAKgB,eAAiB,QAG/C,MAEPC,UAAW,WACPC,cAAcpB,MAEnBqB,MAAK,SAACC,GAEDA,EAAOC,QAAYrB,IAAKsB,cAAcd,SAI9Ce,YAAW,WACP9C,EAAQS,KAAK,gBAEd,UAEF,GAAa,UAATN,GAA6B,UAATE,EAAkB,CAE3C,IAAIgB,EADJd,aAAae,QAAQ,QAAS,SAG9BC,IAAKC,KAAK,CACNC,MAAO,WACPC,KAAM,UAENC,UAAW,CACPC,MAAO,yCAEXC,KAAM,sCACNC,UAAW,CACPF,MAAO,wCAGXG,MAAO,IACPC,QAAS,WACLX,EAAgBY,aAAY,WACxB,IAAMC,EAAUX,IAAKY,aACrB,GAAID,EAAS,CACT,IAAME,EAAIF,EAAQG,cAAc,KAC5BD,IACAA,EAAEE,YAAcf,IAAKgB,eAAiB,QAG/C,MAEPC,UAAW,WACPC,cAAcpB,MAEnBqB,MAAK,SAACC,GAEDA,EAAOC,QAAYrB,IAAKsB,cAAcd,SAI9Ce,YAAW,WACP9C,EAAQS,KAAK,gBAEd,UAIHc,IAAKC,KAAK,CACNC,MAAO,QACPC,KAAM,QACNC,UAAW,CACPC,MAAO,yCAEXC,KAAM,yDACNC,UAAW,CACPF,MAAO,wCAEXG,MAAO,OAjGvB,2BCDDgB,MAhCf,WACE,IAAM/C,EAAUC,cADH,EAGWC,qBAHX,gCAIWA,sBAJX,mBAmBb,OAnBa,UAMwB,MAAjCK,aAAaC,QAAQ,UACvBR,EAAQS,KAAK,cAab,sBAAKuC,UAAU,MAAf,UACE,gDACA,wBAAQA,UAAU,aAAlB,SACE,cAAC,EAAD,U,mDCvBR,SAASC,IAEL,IAAMC,EAAeC,iBAAO,MAFZ,EAGoBjD,mBAAS,IAH7B,mBAGTkD,EAHS,KAGGC,EAHH,KAmJhB,OA7IAC,qBAAU,WACNC,IAAMC,IAAN,oDACKd,MAAK,SAACe,GAKH,IAJA,IAAIC,EAAOD,EAASE,KAChBC,EAAO,GACPC,EAAK,GAEAC,EAAI,EAAGA,EAAIJ,EAAKK,OAAQD,IAC7BF,EAAKnD,KACDuD,IAAON,EAAKI,GAAGG,YAAYC,OAAO,uBAEtCL,EAAGpD,KAAKiD,EAAKI,GAAGK,UAGpB,IAAIC,EAAIC,mBAASR,GACXS,EAAQC,IAAWD,MAAMpB,EAAasB,QAAS,CACjDF,MAAO,CAEHxD,KAAM,UAEV2D,YAAa,CACTC,OAAQ,CACJC,UAAW,CACPC,SAAU,QAItBC,WAAY,CACRC,MAAO,CAAC,CACJC,UAAW,CACPC,SAAU,KAEdC,aAAc,CACVC,OAAQ,CACJC,SAAS,OAKzB1D,MAAO,CACH2D,KAAM,qBAEVC,SAAU,CACND,KAAM,4DAEVE,MAAO,CACHC,WAAY3B,EACZ4B,WAAW,GAEfC,MAAO,CACHC,IAAK,EACLC,IAAKvB,EACL3C,MAAO,CACH2D,KAAM,sBAGdQ,QAAS,CACLC,aAAc,yDACdC,YAAa,sHAEbC,aAAc,WACdC,QAAQ,EACRC,SAAS,GAEbC,QAAS,CACLf,SAAS,GAEbgB,OAAQ/C,IAERA,EAAWW,OAAS,EACpBO,EAAM8B,cAGN9B,EAAM+B,iBAEXC,OAAM,SAACC,GAAD,OAASC,QAAQC,IAAIF,QAGnC,CAACnD,IAIJE,qBAAU,WACNR,YAAW,WACPS,IAAMC,IAAN,oDACKd,MAAK,SAACe,GAKH,IAJA,IAAIiD,EAAMjD,EAASE,KACfgD,EAAe,GACfC,EAAc,GACdC,EAAc,GACT/C,EAAI,EAAGA,EAAI4C,EAAI3C,OAAQD,IACxB4C,EAAI5C,GAAGK,UAAY,GAAKuC,EAAI5C,GAAGK,SAAW,GAC1CwC,EAAalG,KAAK,CACd,KAAQiG,EAAI5C,GAAGgD,KAAKC,MACpBC,EAAGN,EAAI5C,GAAGK,WAIduC,EAAI5C,GAAGK,UAAY,GAAKuC,EAAI5C,GAAGK,SAAW,IAC1CyC,EAAYnG,KAAK,CACb,KAAQiG,EAAI5C,GAAGgD,KAAKC,MACpBC,EAAGN,EAAI5C,GAAGK,WAIduC,EAAI5C,GAAGK,UAAY,IACnB0C,EAAYpG,KAAK,CACb,KAAQiG,EAAI5C,GAAGgD,KAAKC,MACpBC,EAAGN,EAAI5C,GAAGK,WAKtBd,EAAc,CACV,CACI4D,KAAM,yCACNtD,KAAMgD,EACN/F,MAAO,WAIX,CACIqG,KAAM,4CACNtD,KAAMiD,EACNhG,MAAO,UAGX,CACIqG,KAAM,8CACNtD,KAAMkD,EACNjG,MAAO,YAMhB0F,OAAM,SAACC,GAAD,OAASC,QAAQC,IAAIF,QAEnC,OACJ,IAIC,qBAAKW,IAAKhE,EAAcvC,MACpB,CACIwG,kBAAmB,KACnBC,eAAgB,OAChBC,MAAO,OAEbxG,MAAM,sCAMhB,SAASyG,IACL,IAAMC,EAAepE,iBAAO,MADZ,EAGkBjD,mBAAS,IAH3B,mBAGTsH,EAHS,KAGEC,EAHF,KAmEhB,OA9DAnE,qBAAU,WACNR,YAAW,WACPS,IAAMC,IAAI,oDAAoDd,MAAK,SAACe,GAGhE,IAFA,IAAIiD,EAAMjD,EAASE,KACf+D,EAAO,GACF5D,EAAI,EAAGA,EAAI4C,EAAI3C,OAAQD,IACxB4C,EAAI5C,GAAGK,UAAY,GAAKuC,EAAI5C,GAAGK,SAAW,GAC1CuD,EAAKjH,KAAK,CACN,KAAQ,WAAaiG,EAAI5C,GAAG6D,OAC5BX,EAAGN,EAAI5C,GAAGK,WAIlBsD,EAAa,CACT,CACIR,KAAM,WACNtD,KAAM+D,QAInBpB,OAAM,SAACsB,GAAD,OAAWpB,QAAQC,IAAImB,QAEjC,OAEJ,IAEHtE,qBAAU,WACWiB,IAAWD,MAAMiD,EAAa/C,QAAS,CACpDF,MAAO,CACHuD,gBAAiB,UACjB/G,KAAM,OAEVW,MAAO,CACHqG,cAAe,SACfC,UAAU,EACVpH,MAAO,CACHC,MAAO,OACPoH,SAAU,QAGlB9B,QAAS,CACLf,SAAS,GAEbV,YAAa,CACTwD,IAAK,CACDtD,UAAW,CACPC,SAAU,KAEdsD,WAAY,CACRtH,MAAO,OAEPuH,WAAY,YACZjE,OAAQ,0CAEZkE,UAAW,OAGnBjC,OAAQqB,MAEb,CAACA,IAGI,qBAAKN,IAAKK,EAAc1G,MAAM,sCC/H3BwH,MApGf,WAGI,IAAI/D,EACEtE,EAAUC,cA6BhB,OA5BqC,MAAjCM,aAAaC,QAAQ,WACrBe,IAAKC,KAAK,CACNC,MAAO,QACPC,KAAM,QACNC,UAAW,CACPC,MAAO,yCAEXC,KAAM,sCACNC,UAAW,CACPF,MAAO,wCAIXG,MAAO,MAGXe,YAAW,WACP9C,EAAQS,KAAK,OAEd,MAG+B,SAAlCF,aAAaC,QAAQ,SACrB8D,EAAQ,cAACrB,EAAD,IAE+B,UAAlC1C,aAAaC,QAAQ,WAC1B8D,EAAQ,cAAC,EAAD,KAIR,qBAAKtB,UAAU,MAAf,SACI,yBAAQA,UAAU,aAAlB,UAEI,qBAAIrC,MAAO,CACP2H,QAAS,GACTH,WAAY,aACbtH,MAAM,2CAHT,qBAG6DN,aAAaC,QAAQ,YAEjF8D,EAED,qBAAK5D,GAAG,SAASG,MAAM,MAAMF,MACzB,CACI0G,MAAO,SAFf,SAIE,wBAAQxG,MAAM,oCAAoCF,MAAO,CACvDyG,eAAgB,MACjBhG,QAAS,WACyBG,IAAKgH,MAAM,CACxCC,YAAa,CACTC,cAAe,kBACfC,aAAc,kBAElBC,gBAAgB,IAGKnH,KAAK,CAC1BC,MAAO,gBACPC,KAAM,UACNkH,kBAAkB,EAClBC,kBAAmB,MACnBC,iBAAkB,KAClBC,gBAAgB,IACjBrG,MAAK,SAACC,GACDA,EAAOqG,cACPzI,aAAa0I,WAAW,SACxB1H,IAAKC,KAAK,CACNC,MAAO,aACPC,KAAM,UAENC,UAAW,CACPC,MAAO,yCAEXC,KAAM,4BACNC,UAAW,CACPF,MAAO,wCAGXG,MAAO,MAGXe,YAAW,WACP9C,EAAQS,KAAK,OACd,UAtCb,8BC7CHyI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB1G,MAAK,YAAkD,IAA/C2G,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,gBCMdO,IAASC,OACP,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAlB,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOA,KAAK,aAAZ,SACE,cAAC,EAAD,WAINC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a886117c.chunk.js","sourcesContent":["import { React, useState } from 'react';\r\n\r\nimport './App.scss';\r\nimport { useHistory } from 'react-router-dom';\r\nimport Swal from 'sweetalert2'\r\n\r\nimport 'animate.css';\r\nfunction LoginForm() {\r\n\r\n    const history = useHistory();\r\n\r\n    const [User, setUser] = useState();\r\n    const [Pass, setPass] = useState();\r\n\r\n    if (localStorage.getItem('token') != null) {\r\n        history.push('/dashboard');\r\n    }\r\n    const changeUser = (e) => {\r\n        setUser(e.target.value);\r\n    }\r\n\r\n    const changePass = (e) => {\r\n        setPass(e.target.value);\r\n    }\r\n\r\n    return (\r\n\r\n        <div id=\"loginform\">\r\n            <h2 id=\"headerTitle\" style={{\r\n                color: '#000'\r\n            }}>Login Form</h2>\r\n            <div class=\"row\">\r\n                <label>Username</label>\r\n                <input type=\"text\" placeholder=\"Enter your username\" value={User} onChange={changeUser} />\r\n            </div>\r\n            <div class=\"row\">\r\n                <label>Password</label>\r\n                <input type=\"password\" placeholder=\"Enter your password\" value={Pass} onChange={changePass} />\r\n            </div>\r\n            <div id=\"button\" class=\"row\">\r\n                <button onClick={\r\n                    () => {\r\n                        if (User === 'John' && Pass === '12345') {\r\n                            localStorage.setItem('token', 'John');\r\n                            let timerInterval\r\n                            Swal.fire({\r\n                                title: 'Success!',\r\n                                icon: 'success',\r\n\r\n                                showClass: {\r\n                                    popup: 'animate__animated animate__fadeInDown'\r\n                                },\r\n                                html: 'Redirecting to dashboard in <b></b>',\r\n                                hideClass: {\r\n                                    popup: 'animate__animated animate__fadeOutUp',\r\n\r\n                                },\r\n                                timer: 3000,\r\n                                didOpen: () => {\r\n                                    timerInterval = setInterval(() => {\r\n                                        const content = Swal.getContent()\r\n                                        if (content) {\r\n                                            const b = content.querySelector('b')\r\n                                            if (b) {\r\n                                                b.textContent = Swal.getTimerLeft() / 1000\r\n                                            }\r\n                                        }\r\n                                    }, 100)\r\n                                },\r\n                                willClose: () => {\r\n                                    clearInterval(timerInterval)\r\n                                }\r\n                            }).then((result) => {\r\n                                /* Read more about handling dismissals below */\r\n                                if (result.dismiss === Swal.DismissReason.timer) {\r\n                                }\r\n                            }\r\n                            )\r\n                            setTimeout(() => {\r\n                                history.push('/dashboard');\r\n\r\n                            }, 3000)\r\n                        }\r\n                        else if (User === 'MICKY' && Pass === '98765') {\r\n                            localStorage.setItem('token', 'MICKY');\r\n                            let timerInterval\r\n\r\n                            Swal.fire({\r\n                                title: 'Success!',\r\n                                icon: 'success',\r\n\r\n                                showClass: {\r\n                                    popup: 'animate__animated animate__fadeInDown'\r\n                                },\r\n                                html: 'Redirecting to dashboard in <b></b>',\r\n                                hideClass: {\r\n                                    popup: 'animate__animated animate__fadeOutUp',\r\n\r\n                                },\r\n                                timer: 3000,\r\n                                didOpen: () => {\r\n                                    timerInterval = setInterval(() => {\r\n                                        const content = Swal.getContent()\r\n                                        if (content) {\r\n                                            const b = content.querySelector('b')\r\n                                            if (b) {\r\n                                                b.textContent = Swal.getTimerLeft() / 1000\r\n                                            }\r\n                                        }\r\n                                    }, 100)\r\n                                },\r\n                                willClose: () => {\r\n                                    clearInterval(timerInterval)\r\n                                }\r\n                            }).then((result) => {\r\n                                /* Read more about handling dismissals below */\r\n                                if (result.dismiss === Swal.DismissReason.timer) {\r\n                                }\r\n                            }\r\n                            )\r\n                            setTimeout(() => {\r\n                                history.push('/dashboard');\r\n\r\n                            }, 3000)\r\n                        }\r\n                        else {\r\n\r\n                            Swal.fire({\r\n                                title: 'Oops!',\r\n                                icon: 'error',\r\n                                showClass: {\r\n                                    popup: 'animate__animated animate__fadeInDown'\r\n                                },\r\n                                html: '<b>It looks like you entered incorrect credentials</b>',\r\n                                hideClass: {\r\n                                    popup: 'animate__animated animate__fadeOutUp',\r\n                                },\r\n                                timer: 3000,\r\n\r\n                            })\r\n\r\n                        }\r\n                    }}>Sign In</button>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n\r\n}\r\n\r\nexport default LoginForm;","import React, { useState } from 'react';\n\nimport './App.scss';\nimport { Button, Form, FormGroup, Label, Input, Card, Container } from 'reactstrap';\nimport { useHistory } from 'react-router-dom';\nimport LoginForm from './LoginForm';\n\nfunction App() {\n  const history = useHistory();\n\n  const [User, setUser] = useState();\n  const [Pass, setPass] = useState();\n\n  if (localStorage.getItem('token') != null) {\n    history.push('/dashboard');\n  }\n  const changeUser = (e) => {\n    setUser(e.target.value);\n  }\n\n  const changePass = (e) => {\n    setPass(e.target.value);\n  }\n\n\n\n  return (\n    <div className=\"App\">\n      <title>Github_repo</title>\n      <header className=\"App-header\">\n        <LoginForm />\n      </header>\n    </div>\n\n  );\n\n\n}\n\nexport default App;\n","import './App.scss';\r\nimport Highcharts, { arrayMax } from 'highcharts';\r\nimport { React, useRef, useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport 'animate.css';\r\nimport moment from 'moment';\r\n\r\nfunction BarChart() {\r\n\r\n    const refContainer = useRef(null);\r\n    const [dataSource, setDataSource] = useState([]);\r\n\r\n\r\n    useEffect(() => {\r\n        axios.get(`https://api.github.com/repositories/19438/issues`)\r\n            .then((response) => {\r\n                let gres = response.data;\r\n                let cats = [];\r\n                let ys = [];\r\n                let d;\r\n                for (var i = 0; i < gres.length; i++) {\r\n                    cats.push(\r\n                        moment(gres[i].created_at).format('DD MMM, YYYY,hh:mm')\r\n                    );\r\n                    ys.push(gres[i].comments)\r\n                }\r\n\r\n                let m = arrayMax(ys);\r\n                const chart = Highcharts.chart(refContainer.current, {\r\n                    chart: {\r\n\r\n                        type: 'column'\r\n                    }, // type of the chart\r\n                    plotOptions: {\r\n                        column: {\r\n                            animation: {\r\n                                duration: 1500\r\n                            }\r\n                        }\r\n                    },\r\n                    responsive: {\r\n                        rules: [{\r\n                            condition: {\r\n                                maxWidth: 500\r\n                            },\r\n                            chartOptions: {\r\n                                legend: {\r\n                                    enabled: false\r\n                                }\r\n                            }\r\n                        }]\r\n                    },\r\n                    title: {\r\n                        text: 'Github repo stats'\r\n                    }, // title of the chart\r\n                    subtitle: {\r\n                        text: 'Note: Only displaying active issues (at least 1 comment)'\r\n                    }, // subtitle of the chart\r\n                    xAxis: {\r\n                        categories: cats, // the categories of the X Axis\r\n                        crosshair: true\r\n                    },\r\n                    yAxis: {\r\n                        min: 1, // minimum value of the Y Axis\r\n                        max: m,\r\n                        title: {\r\n                            text: 'Issues & comments'\r\n                        } // the title of the Y Axis\r\n                    },\r\n                    tooltip: {\r\n                        headerFormat: '<span style=\"font-size:10px\">{point.key}</span><table>',\r\n                        pointFormat: '<tr><td style=\"color:{series.color};padding:0\">{series.name}: </td>' +\r\n                            '<td style=\"padding:0\"><b>{point.y}</b></td></tr>',\r\n                        footerFormat: '</table>',\r\n                        shared: true,\r\n                        useHTML: true\r\n                    }, // tooltip appears when hovering over a point\r\n                    credits: {\r\n                        enabled: false\r\n                    },\r\n                    series: dataSource // set of the data\r\n                });\r\n                if (dataSource.length > 0) {\r\n                    chart.hideLoading();\r\n                }\r\n                else {\r\n                    chart.showLoading();\r\n                }\r\n            }).catch((err) => console.log(err));\r\n\r\n\r\n    }, [dataSource]);\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            axios.get(`https://api.github.com/repositories/19438/issues`)\r\n                .then((response) => {\r\n                    let res = response.data;\r\n                    let ActiveSeries = [];\r\n                    let HyperSeries = [];\r\n                    let SuperSeries = [];\r\n                    for (var i = 0; i < res.length; i++) {\r\n                        if (res[i].comments >= 1 && res[i].comments < 5) {\r\n                            ActiveSeries.push({\r\n                                'name': res[i].user.login,\r\n                                y: res[i].comments\r\n                            }\r\n                            );\r\n                        }\r\n                        if (res[i].comments >= 5 && res[i].comments < 10) {\r\n                            HyperSeries.push({\r\n                                'name': res[i].user.login,\r\n                                y: res[i].comments\r\n                            }\r\n                            );\r\n                        }\r\n                        if (res[i].comments >= 10) {\r\n                            SuperSeries.push({\r\n                                'name': res[i].user.login,\r\n                                y: res[i].comments\r\n                            }\r\n                            );\r\n                        }\r\n                    }\r\n                    setDataSource([\r\n                        {\r\n                            name: 'Active issues (atleast than 1 comment)',\r\n                            data: ActiveSeries,\r\n                            color: '#2ecc71',\r\n\r\n\r\n                        },\r\n                        {\r\n                            name: 'Very active issues (more than 5 comments)',\r\n                            data: HyperSeries,\r\n                            color: 'orange',\r\n\r\n                        },\r\n                        {\r\n                            name: 'Hyper active issues (more than 10 comments)',\r\n                            data: SuperSeries,\r\n                            color: 'red',\r\n\r\n                        }\r\n\r\n                    ]);\r\n\r\n                }).catch((err) => console.log(err));\r\n\r\n        }, 1000);\r\n    }, []);\r\n\r\n    return (\r\n\r\n        <div ref={refContainer} style={\r\n            {\r\n                animationDuration: '2s',\r\n                animationDelay: '0.9s',\r\n                width: '75%'\r\n            }\r\n        } class=\"animate__animated animate__fadeIn\" />\r\n    );\r\n\r\n\r\n}\r\n\r\nfunction PieChart() {\r\n    const pieContainer = useRef(null);\r\n\r\n    const [PieSource, setPieSource] = useState([]);\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            axios.get('https://api.github.com/repositories/19438/issues').then((response) => {\r\n                let res = response.data;\r\n                let Pies = [];\r\n                for (var i = 0; i < res.length; i++) {\r\n                    if (res[i].comments >= 1 && res[i].comments < 5) {\r\n                        Pies.push({\r\n                            'name': 'IssueID:' + res[i].number,\r\n                            y: res[i].comments\r\n                        }\r\n                        );\r\n                    }\r\n                    setPieSource([\r\n                        {\r\n                            name: 'Comments',\r\n                            data: Pies\r\n                        }\r\n                    ])\r\n                }\r\n            }).catch((error) => console.log(error))\r\n\r\n        }, 100)\r\n\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        const PieChart = Highcharts.chart(pieContainer.current, {\r\n            chart: {\r\n                backgroundColor: '#5a36e8',\r\n                type: 'pie',\r\n            },\r\n            title: {\r\n                verticalAlign: 'middle',\r\n                floating: true,\r\n                style: {\r\n                    color: '#fff',\r\n                    fontSize: '0px',\r\n                }\r\n            },\r\n            credits: {\r\n                enabled: false\r\n            },\r\n            plotOptions: {\r\n                pie: {\r\n                    animation: {\r\n                        duration: 1000\r\n                    },\r\n                    dataLabels: {\r\n                        color: '#fff',\r\n\r\n                        fontFamily: 'monospace',\r\n                        format: '{point.name}: {point.percentage:.1f} %'\r\n                    },\r\n                    innerSize: '0%'\r\n                }\r\n            },\r\n            series: PieSource\r\n        });\r\n    }, [PieSource])\r\n\r\n\r\n    return (<div ref={pieContainer} class=\"animate__animated animate__fadeIn\" >\r\n    </div>)\r\n\r\n}\r\n\r\nexport { BarChart, PieChart };\r\n","import './App.scss';\r\nimport { Button, Form, FormGroup, Label, Input } from 'reactstrap';\r\nimport { Link, Switch, Router, useHistory } from 'react-router-dom';\r\nimport { BarChart, PieChart } from './Chart';\r\nimport 'animate.css';\r\nimport Swal from 'sweetalert2';\r\n\r\n\r\nfunction Dashboard() {\r\n\r\n\r\n    let chart;\r\n    const history = useHistory();\r\n    if (localStorage.getItem('token') == null) {\r\n        Swal.fire({\r\n            title: 'Oops!',\r\n            icon: 'error',\r\n            showClass: {\r\n                popup: 'animate__animated animate__fadeInDown'\r\n            },\r\n            html: '<b>Unauthorized access detected</b>',\r\n            hideClass: {\r\n                popup: 'animate__animated animate__fadeOutUp',\r\n\r\n\r\n            },\r\n            timer: 1000\r\n\r\n        })\r\n        setTimeout(() => {\r\n            history.push(\"/\");\r\n\r\n        }, 1000)\r\n    }\r\n\r\n    if (localStorage.getItem('token') === 'John') {\r\n        chart = <BarChart />\r\n    }\r\n    else if (localStorage.getItem('token') === 'MICKY') {\r\n        chart = <PieChart />\r\n    }\r\n    return (\r\n\r\n        <div className=\"App\">\r\n            <header className=\"App-header\">\r\n\r\n                <h1 style={{\r\n                    padding: 20,\r\n                    fontFamily: 'monospace'\r\n                }} class=\"animate__animated animate__fadeInLeftBig\">Welcome {localStorage.getItem('token')}</h1>\r\n\r\n                {chart}\r\n\r\n                <div id=\"button\" class=\"row\" style={\r\n                    {\r\n                        width: '150px'\r\n                    }\r\n                }><button class=\"animate__animated animate__fadeIn\" style={{\r\n                    animationDelay: '2s'\r\n                }} onClick={() => {\r\n                    const swalWithBootstrapButtons = Swal.mixin({\r\n                        customClass: {\r\n                            confirmButton: 'btn btn-success',\r\n                            cancelButton: 'btn btn-danger'\r\n                        },\r\n                        buttonsStyling: true\r\n                    })\r\n\r\n                    swalWithBootstrapButtons.fire({\r\n                        title: 'Are you sure?',\r\n                        icon: 'warning',\r\n                        showCancelButton: true,\r\n                        confirmButtonText: 'Yes',\r\n                        cancelButtonText: 'No',\r\n                        reverseButtons: true\r\n                    }).then((result) => {\r\n                        if (result.isConfirmed) {\r\n                            localStorage.removeItem('token')\r\n                            Swal.fire({\r\n                                title: 'Logged out',\r\n                                icon: 'success',\r\n\r\n                                showClass: {\r\n                                    popup: 'animate__animated animate__fadeInDown'\r\n                                },\r\n                                html: '<b>See you next time!</b>',\r\n                                hideClass: {\r\n                                    popup: 'animate__animated animate__fadeOutUp',\r\n\r\n                                },\r\n                                timer: 1000\r\n\r\n                            })\r\n                            setTimeout(() => {\r\n                                history.push('/');\r\n                            }, 1000)\r\n                        }\r\n                    })\r\n                }}>Sign Out</button></div>\r\n            </header>\r\n\r\n        </div>\r\n\r\n    );\r\n\r\n\r\n}\r\n\r\nexport default Dashboard;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { useState, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Dashboard from './Dashboard';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\n<link\n  rel=\"stylesheet\"\n  href=\"https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css\"\n/>\nReactDOM.render(\n  <Router>\n    <Switch>\n      <Route exact path=\"/\">\n        <App />\n      </Route>\n      <Route path=\"/dashboard\">\n        <Dashboard />\n      </Route>\n    </Switch>\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}